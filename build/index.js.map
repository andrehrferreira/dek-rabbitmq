{"version":3,"sources":["../src/index.js"],"names":["dbConfig","env","process","configApproved","hasOwnProperty","RABBITMQ_HOST","console","log","RABBITMQ_PORT","exit","$","set","socketOptions","amqp","connect","e","message"],"mappings":";;;;;;AAAA;;AACA;;;;;;kBAEe,YAAM;AACjB,QAAG;AACC,YAAIA,WAAW,EAAf;AACA,YAAIC,MAAMC,QAAQD,GAAlB;AACA,YAAIE,iBAAiB,IAArB;;AAEA,YAAG,CAACF,IAAIG,cAAJ,CAAmB,cAAnB,CAAJ,EAAuC;AACnC,gBAAGH,IAAIG,cAAJ,CAAmB,eAAnB,KAAuC,CAAC,CAACH,IAAII,aAAhD,EACIL,SAAS,eAAT,IAA4BC,IAAII,aAAhC,CADJ,KAEK;AACDF,iCAAiB,KAAjB;AACAG,wBAAQC,GAAR,CAAY,qEAAZ;AACH;;AAED,gBAAGN,IAAIG,cAAJ,CAAmB,eAAnB,KAAuC,CAAC,CAACH,IAAIO,aAAhD,EACIR,SAAS,eAAT,IAA4BC,IAAIO,aAAhC,CADJ,KAEK;AACDL,iCAAiB,KAAjB;AACAG,wBAAQC,GAAR,CAAY,qEAAZ;AACH;AACJ,SAdD,MAeI;AACAJ,6BAAiB,IAAjB;AACH;;AAED,YAAG,CAACA,cAAJ,EAAmB;AACfG,oBAAQC,GAAR,CAAY,mFAAZ;AACAL,oBAAQO,IAAR,CAAa,CAAC,CAAd;AACH,SAHD,MAIK;AACD,gBAAI;AACA,oBAAGR,IAAIG,cAAJ,CAAmB,cAAnB,CAAH,EAAsC;AAClCM,6BAAEC,GAAF,CAAM,UAAN,EAAkB,UAACC,aAAD,EAAmB;AACjC,+BAAOC,kBAAKC,OAAL,aAAuBb,IAAI,cAAJ,CAAvB,EAA8CW,aAA9C,CAAP;AACH,qBAFD;AAGH,iBAJD,MAKI;AACAF,6BAAEC,GAAF,CAAM,UAAN,EAAkB,UAACC,aAAD,EAAmB;AACjC,+BAAOC,kBAAKC,OAAL,aAAuBd,SAAS,eAAT,CAAvB,SAAoDA,SAAS,eAAT,CAApD,EAAiFY,aAAjF,CAAP;AACH,qBAFD;AAGH;AACJ,aAXD,CAYA,OAAOG,CAAP,EAAU;AACNT,wBAAQC,GAAR,qBAA8BQ,EAAEC,OAAhC;AACH;AACJ;AACJ,KA7CD,CA8CA,OAAOD,CAAP,EAAU;AACNT,gBAAQC,GAAR,qBAA8BQ,EAAEC,OAAhC;AACH;AACJ,C","file":"index.js","sourcesContent":["import { $ } from \"@dekproject/scope\";\nimport amqp from \"amqplib\";\n\nexport default () => {\n    try{\n        let dbConfig = {};\n        let env = process.env;\n        let configApproved = true;\n\n        if(!env.hasOwnProperty(\"RABBITMQ_URI\")){\n            if(env.hasOwnProperty(\"RABBITMQ_HOST\") && !!env.RABBITMQ_HOST)\n                dbConfig[\"RABBITMQ_HOST\"] = env.RABBITMQ_HOST;\n            else {\n                configApproved = false;\n                console.log(\"[ RabbitMQ ] - There is no RABBITMQ_HOST variable in the .env file.\");\n            }\n\n            if(env.hasOwnProperty(\"RABBITMQ_PORT\") && !!env.RABBITMQ_PORT)\n                dbConfig[\"RABBITMQ_PORT\"] = env.RABBITMQ_PORT;\n            else {\n                configApproved = false;\n                console.log(\"[ RabbitMQ ] - There is no RABBITMQ_PORT variable in the .env file.\");\n            }\n        }\n        else{\n            configApproved = true;\n        }\n\n        if(!configApproved){\n            console.log(\"[ RabbitMQ ] - Please correct the above errors before restarting the application.\");\n            process.exit(-1);\n        }\n        else {\n            try {\n                if(env.hasOwnProperty(\"RABBITMQ_URI\")){\n                    $.set(\"rabbitmq\", (socketOptions) => {\n                        return amqp.connect(`amqp://${env[\"RABBITMQ_URI\"]}`, socketOptions);\n                    });\n                }\n                else{\n                    $.set(\"rabbitmq\", (socketOptions) => {\n                        return amqp.connect(`amqp://${dbConfig[\"RABBITMQ_HOST\"]}:${dbConfig[\"RABBITMQ_PORT\"]}`, socketOptions);\n                    });\n                }\n            }\n            catch (e) {\n                console.log(`[ RabbitMQ ] - ${e.message}`);\n            }\n        }\n    }\n    catch (e) {\n        console.log(`[ RabbitMQ ] - ${e.message}`);\n    }\n};\n"]}