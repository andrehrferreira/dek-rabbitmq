{"version":3,"sources":["../src/index.js"],"names":["amqp","require","dbConfig","env","process","configApproved","hasOwnProperty","RABBITMQ_HOST","console","log","RABBITMQ_PORT","exit","$","set","socketOptions","connect","e","message"],"mappings":";;;;;;;AAAA;;AAEA;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,yBAAD,CAApB;;eAEe,oBAAM;AACjB,MAAG;AACC,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,GAAG,GAAGC,OAAO,CAACD,GAAlB;AACA,QAAIE,cAAc,GAAG,IAArB;;AAEA,QAAG,CAACF,GAAG,CAACG,cAAJ,CAAmB,cAAnB,CAAJ,EAAuC;AACnC,UAAGH,GAAG,CAACG,cAAJ,CAAmB,eAAnB,KAAuC,CAAC,CAACH,GAAG,CAACI,aAAhD,EACIL,QAAQ,CAAC,eAAD,CAAR,GAA4BC,GAAG,CAACI,aAAhC,CADJ,KAEK;AACDF,QAAAA,cAAc,GAAG,KAAjB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACH;AAED,UAAGN,GAAG,CAACG,cAAJ,CAAmB,eAAnB,KAAuC,CAAC,CAACH,GAAG,CAACO,aAAhD,EACIR,QAAQ,CAAC,eAAD,CAAR,GAA4BC,GAAG,CAACO,aAAhC,CADJ,KAEK;AACDL,QAAAA,cAAc,GAAG,KAAjB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACH;AACJ,KAdD,MAeI;AACAJ,MAAAA,cAAc,GAAG,IAAjB;AACH;;AAED,QAAG,CAACA,cAAJ,EAAmB;AACfG,MAAAA,OAAO,CAACC,GAAR,CAAY,mFAAZ;AACAL,MAAAA,OAAO,CAACO,IAAR,CAAa,CAAC,CAAd;AACH,KAHD,MAIK;AACD,UAAI;AACA,YAAGR,GAAG,CAACG,cAAJ,CAAmB,cAAnB,CAAH,EAAsC;AAClCM,mBAAEC,GAAF,CAAM,UAAN,EAAkB,UAACC,aAAD,EAAmB;AACjC,mBAAOd,IAAI,CAACe,OAAL,CAAa,kBAAWZ,GAAG,CAAC,cAAD,CAAd,EAAb,EAAgDW,aAAhD,CAAP;AACH,WAFD;AAGH,SAJD,MAKI;AACAF,mBAAEC,GAAF,CAAM,UAAN,EAAkB,UAACC,aAAD,EAAmB;AACjC,mBAAOd,IAAI,CAACe,OAAL,CAAa,kBAAWb,QAAQ,CAAC,eAAD,CAAnB,cAAwCA,QAAQ,CAAC,eAAD,CAAhD,EAAb,EAAmFY,aAAnF,CAAP;AACH,WAFD;AAGH;AACJ,OAXD,CAYA,OAAOE,CAAP,EAAU;AACNR,QAAAA,OAAO,CAACC,GAAR,0BAA8BO,CAAC,CAACC,OAAhC;AACH;AACJ;AACJ,GA7CD,CA8CA,OAAOD,CAAP,EAAU;AACNR,IAAAA,OAAO,CAACC,GAAR,0BAA8BO,CAAC,CAACC,OAAhC;AACH;AACJ,C","sourcesContent":["import \"@babel/polyfill/noConflict\";\n\nimport { $ } from \"@dekproject/scope\";\nconst amqp = require(\"amqp-connection-manager\");\n\nexport default () => {\n    try{\n        let dbConfig = {};\n        let env = process.env;\n        let configApproved = true;\n\n        if(!env.hasOwnProperty(\"RABBITMQ_URI\")){\n            if(env.hasOwnProperty(\"RABBITMQ_HOST\") && !!env.RABBITMQ_HOST)\n                dbConfig[\"RABBITMQ_HOST\"] = env.RABBITMQ_HOST;\n            else {\n                configApproved = false;\n                console.log(\"[ RabbitMQ ] - There is no RABBITMQ_HOST variable in the .env file.\");\n            }\n\n            if(env.hasOwnProperty(\"RABBITMQ_PORT\") && !!env.RABBITMQ_PORT)\n                dbConfig[\"RABBITMQ_PORT\"] = env.RABBITMQ_PORT;\n            else {\n                configApproved = false;\n                console.log(\"[ RabbitMQ ] - There is no RABBITMQ_PORT variable in the .env file.\");\n            }\n        }\n        else{\n            configApproved = true;\n        }\n\n        if(!configApproved){\n            console.log(\"[ RabbitMQ ] - Please correct the above errors before restarting the application.\");\n            process.exit(-1);\n        }\n        else {\n            try {\n                if(env.hasOwnProperty(\"RABBITMQ_URI\")){\n                    $.set(\"rabbitmq\", (socketOptions) => {\n                        return amqp.connect([`amqp://${env[\"RABBITMQ_URI\"]}`], socketOptions);\n                    });\n                }\n                else{\n                    $.set(\"rabbitmq\", (socketOptions) => {\n                        return amqp.connect([`amqp://${dbConfig[\"RABBITMQ_HOST\"]}:${dbConfig[\"RABBITMQ_PORT\"]}`], socketOptions);\n                    });\n                }\n            }\n            catch (e) {\n                console.log(`[ RabbitMQ ] - ${e.message}`);\n            }\n        }\n    }\n    catch (e) {\n        console.log(`[ RabbitMQ ] - ${e.message}`);\n    }\n};\n"],"file":"index.js"}