{"version":3,"sources":["../src/sample.js"],"names":["dotenv","config","$","wait","then","connection","on","console","log","channelWrapper","createChannel","json","setup","channel","Promise","all","assertQueue","exclusive","autoDelete","prefetch","consume","msg","content","toString","ack","noAck","waitForConnect","sendToQueue","hello","err","process","exit"],"mappings":";;AAAA;;AAEA;;AACA;;;;;;;;AAEA,wDAAC;AAAA;AAAA;AAAA;AAAA;AACGA,6BAAOC,MAAP;;AADH;AAAA,iBAES,oBAAQ,SAAR,CAFT;;AAAA;AAIGC,mBAAEC,IAAF,CAAO,CAAC,UAAD,CAAP,EAAqB,IAArB,EAA2BC,IAA3B,CAAgC,YAAM;AAClC,gBAAIC,UAAU,GAAG,sBAAjB;AAEAA,YAAAA,UAAU,CAACC,EAAX,CAAc,SAAd,EAAyB,YAAM;AAC3BC,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,aAFD;AAIAH,YAAAA,UAAU,CAACC,EAAX,CAAc,YAAd,EAA4B,YAAM;AAC9BC,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,aAFD;AAIA,gBAAIC,cAAc,GAAGJ,UAAU,CAACK,aAAX,CAAyB;AAC1CC,cAAAA,IAAI,EAAE,IADoC;AAE1CC,cAAAA,KAAK,EAAE,eAACC,OAAD,EAAa;AAChB,uBAAOC,OAAO,CAACC,GAAR,CAAY,CACfF,OAAO,CAACG,WAAR,CAAoB,OAApB,EAA6B;AAAEC,kBAAAA,SAAS,EAAE,IAAb;AAAmBC,kBAAAA,UAAU,EAAE;AAA/B,iBAA7B,CADe,EAEfL,OAAO,CAACM,QAAR,CAAiB,CAAjB,CAFe,EAGfN,OAAO,CAACO,OAAR,CAAgB,OAAhB,EAAyB,UAACC,GAAD,EAAS;AAC9Bd,kBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCa,GAAG,CAACC,OAAJ,CAAYC,QAAZ,EAAlC;AACAd,kBAAAA,cAAc,CAACe,GAAf,CAAmBH,GAAnB;AACH,iBAHD,EAGG;AAAEI,kBAAAA,KAAK,EAAE;AAAT,iBAHH,CAHe,CAAZ,CAAP;AAQH;AAXyC,aAAzB,CAArB;AAcAhB,YAAAA,cAAc,CAACiB,cAAf,GAAgCtB,IAAhC,CAAqC,YAAM;AACvCG,cAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAC,cAAAA,cAAc,CAACkB,WAAf,CAA2B,OAA3B,EAAoC;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eAApC;AACH,aAHD;AAIH,WA7BD,WA6BS,UAACC,GAAD,EAAS;AACdtB,YAAAA,OAAO,CAACC,GAAR,CAAYqB,GAAZ;AACAC,YAAAA,OAAO,CAACC,IAAR,CAAa,CAAC,CAAd;AACH,WAhCD;;AAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD","sourcesContent":["import \"@babel/polyfill/noConflict\";\n\nimport dotenv from \"dotenv\";\nimport { $, plugins, rabbitmq } from \"@dekproject/scope\";\n\n(async () => {\n    dotenv.config();\n    await plugins(\"./build\");\n\n    $.wait([\"rabbitmq\"], 5000).then(() => {\n        let connection = rabbitmq();\n\n        connection.on(\"connect\", () => {\n            console.log(\"Connected!\");\n        });\n        \n        connection.on(\"disconnect\", () => {\n            console.log(\"Disconnected.\");\n        });\n\n        let channelWrapper = connection.createChannel({\n            json: true,\n            setup: (channel) => {\n                return Promise.all([\n                    channel.assertQueue(\"hello\", { exclusive: true, autoDelete: true }),\n                    channel.prefetch(1),\n                    channel.consume(\"hello\", (msg) => {\n                        console.log(\" [x] Received '%s'\", msg.content.toString());\n                        channelWrapper.ack(msg);\n                    }, { noAck: true })\n                ]);\n            }\n        });\n\n        channelWrapper.waitForConnect().then(() => {\n            console.log(\"Listening for messages\");\n            channelWrapper.sendToQueue(\"hello\", { hello: \"world\" });\n        });        \n    }).catch((err) => {\n        console.log(err);\n        process.exit(-1);\n    });\n})();\n"],"file":"sample.js"}